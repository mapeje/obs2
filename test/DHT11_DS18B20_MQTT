#include <ESP8266WiFi.h>
#include <Wire.h>
#include <PubSubClient.h>

#include "DHT.h"
#include <OneWire.h>
#include <DallasTemperature.h>

//DHT11

DHT dht(D4, DHT11); // (PIN#, DHTTYPE)

//DS18B20

const int oneWireBus = D2;  //GPIO where the DS18B20 is connected to Lolin D1 mini    
OneWire oneWire(oneWireBus); // Setup a 1W instance to communicate with any 1W devices
DallasTemperature sensors(&oneWire); // Pass our 1W reference to Dallas Temperature sensor 

//Wifi

#define wifi_ssid "SSID"
#define wifi_password "PWD"

#define mqtt_server "IP"
#define mqtt_user "usr"
#define mqtt_password "pwd"

#define humidity_outside_topic "obs2/sensor/outside_humidity"
#define temperature_outside_topic "obs2/sensor/outside_temperature"
#define temperature_engine_topic "obs2/sensor/engine_temperature"


WiFiClient espClient;
PubSubClient client(espClient);

void setup() {
  Serial.begin(115200);
  dht.begin();
  setup_wifi();
  client.setServer(mqtt_server, 1883);
}

String macToStr(const uint8_t* mac)
{
  String result;
  for (int i = 0; i < 6; ++i) {
    result += String(mac[i], 16);
    if (i < 5)
      result += ':';
  }
  return result;
}


void setup_wifi() {
  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(wifi_ssid);

  WiFi.begin(wifi_ssid, wifi_password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
        Serial.print("Attempting MQTT connection...");
    
          // Generate client name based on MAC address and last 8 bits of microsecond counter
      String clientName;  
      clientName += "esp8266-";
      uint8_t mac[6];
      WiFi.macAddress(mac);
      clientName += macToStr(mac);
      clientName += "-";
      clientName += String(micros() & 0xff, 16);
      Serial.print("Connecting to ");
      Serial.print(mqtt_server);
      Serial.print(" as ");
      Serial.println(clientName);


    // Attempt to connect
    // If you do not want to use a username and password, change next line to
  //if (client.connect((char*) clientName.c_str())) {
  if (client.connect((char*) clientName.c_str(), mqtt_user, mqtt_password)) {
      Serial.println("connected");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}


void loop() {
  
      if (!client.connected()) {
        reconnect();
      }
      client.loop();

      // Wait a few seconds between measurements.
      delay(2000);
      
      // Reading temperature or humidity takes about 250 milliseconds!
      // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)
      float h = dht.readHumidity();
      // Read temperature as Celsius (the default)
      float t = dht.readTemperature();
           
      // DS18B20 Temperature value
      sensors.requestTemperatures(); 
      float temp = sensors.getTempCByIndex(0);
       

      // Check if any reads failed and exit early (to try again).
      if (isnan(temp) || isnan(h) || isnan(t) ) {
      Serial.println("Failed to read from sensor!");
      return;
      }
      
      // Compute heat index in Celsius (isFahreheit = false)
      //float hic = dht.computeHeatIndex(t, h, false);
     
     // Print data on serial
      
      Serial.print("Outside Humidity: ");
      Serial.print(h);
      Serial.print(" %\t");
      Serial.print("Outside Temperature: ");
      Serial.print(t);
      Serial.print(" ºC\t ");
      //Serial.print("Heat index: ");
      //Serial.print(hic);
      //Serial.print(" ºC\t ");
      Serial.print("Engine temperature: ");
      Serial.print(temp);
      Serial.println("ºC\t");

      // Publish on mqtt
      
      client.publish(temperature_outside_topic, String(t).c_str(), true);
      client.publish(humidity_outside_topic, String(h).c_str(), true);
      client.publish(temperature_engine_topic, String(temp).c_str(), true);
}
